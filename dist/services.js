!function(root,factory){"function"==typeof define&&define.amd?define([],factory):"object"==typeof module&&module.exports?module.exports=factory():root.services=factory()}(this,function(){"use strict";var ServiceType={FUNCTION:"FUNCTION",ASYNC_FUNCTION:"ASYNC_FUNCTION"};function registerType(serviceType,serviceFunction){if(!isString_(serviceType))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure serviceType is a string."));if("function"!=typeof serviceFunction)throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure serviceFunction is a function."));serviceTypes_[serviceType]=serviceFunction}function register(serviceName,serviceConfig,opt_overwrite){if(!isString_(serviceName))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure serviceName is a string."));if(null==serviceConfig||!isString_(serviceConfig.type)||"function"!=typeof serviceTypes_[serviceConfig.type])throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure serviceConfig is not null and serviceConfig.type is a string which specifies existing serviceType (see method registerType)."));if(!opt_overwrite&&serviceRegistry_[serviceName])throw new Error(Errors.SERVICE_ALREADY_REGISTERED.toString(serviceName));serviceRegistry_[serviceName]=serviceConfig}function unregister(serviceName){if(!isRegistered(serviceName))throw new Error(Errors.SERVICE_UNREGISTERED.toString(serviceName));delete serviceRegistry_[serviceName],delete serviceStatusRegistry_[serviceName]}function isRegistered(serviceName){if(!isString_(serviceName))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure serviceName is a string."));return!!serviceRegistry_[serviceName]}function send(serviceName,request){if(!isRegistered(serviceName))throw new Error(Errors.SERVICE_UNREGISTERED.toString(serviceName));var buffer=serviceBuffers_[serviceName];buffer||(buffer=[],serviceBuffers_[serviceName]=buffer);var r=new Request(request);return buffer.push(r),r.promise}function flush(serviceName){if(!isRegistered(serviceName))throw new Error(Errors.SERVICE_UNREGISTERED.toString(serviceName));var serviceConfig=serviceRegistry_[serviceName],serviceFunction=serviceTypes_[serviceConfig.type],serviceBuffer=serviceBuffers_[serviceName];serviceBuffer&&0!==serviceBuffer.length&&(serviceBuffers_[serviceName]=[],serviceFunction(serviceBuffer,serviceConfig,serviceName))}function flushAll(){for(var serviceName in serviceRegistry_)flush(serviceName)}function Request(body){this.body=body,this.resolve,this.reject;var that=this;this.promise=new Promise(function(resolve,reject){that.resolve=resolve,that.reject=reject})}var serviceRegistry_={},serviceStatusRegistry_={},serviceBuffers_={},serviceTypes_={},isArray_=function(){if(Array.isArray)return Array.isArray;var objectToStringFn=Object.prototype.toString,arrayToStringResult=objectToStringFn.call([]);return function(subject){return objectToStringFn.call(subject)===arrayToStringResult}}();function isNumber_(obj){return"number"==typeof obj}function isString_(obj){return"string"==typeof obj}function ErrorMessage(code,desc){if(!isNumber_(code))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure code is a number."));if(!isString_(desc))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure desc is a string."));this.code=code,this.desc=desc}function resolveAll(requests,responses){for(var i=0;i<responses.length;i++)requests[i].resolve(responses[i])}function rejectAll(requests,err){for(var i=0;i<requests.length;i++)err instanceof Error?requests[i].reject(err):requests[i].reject(new Error(err))}function resolveAllSuccessful(requests,responses){for(var i=0;i<responses.length;i++){var request=requests[i],response=responses[i];if(null!=response&&response.success)request.resolve(response);else if(null!=response){var err=response.error;err instanceof Error?requests[i].reject(err):requests[i].reject(new Error(err))}else request.reject(new Error(Errors.ERRONEOUS_RESPONSE.toString()))}}function setServiceStatus(serviceName,currentStatus){if(!isString_(serviceName))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure serviceName is a string."));if(!isString_(currentStatus))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure currentStatus is a string."));null!=serviceRegistry_[serviceName]&&(serviceStatusRegistry_[serviceName]=currentStatus)}function getServiceStatus(serviceName){if(!isString_(serviceName))throw new Error(Errors.ILLEGAL_ARGUMENT.toString("Make sure serviceName is a string."));return serviceStatusRegistry_[serviceName]}ErrorMessage.prototype.toString=function(var_args){for(var desc=this.desc,i=0;i<arguments.length;i++)desc=desc.replace("$"+(i+1),arguments[i]);return"Oops! "+desc+" (#"+this.code+")"},ErrorMessage.prototype.isTypeOf=function(error){return-1!==error.message.indexOf("#"+this.code)},registerType(ServiceType.FUNCTION,function(requests,config,serviceName){for(var responses,packed=[],i=0;i<requests.length;i++)packed.push(requests[i].body);try{if(responses=config.func(packed),!isArray_(responses)||responses.length!==requests.length)throw new Error(Errors.ILLEGAL_RESPONSE_SIZE.toString())}catch(err){return rejectAll(requests,err),void setServiceStatus(serviceName,"offline")}resolveAllSuccessful(requests,responses),setServiceStatus(serviceName,"online")}),registerType(ServiceType.ASYNC_FUNCTION,function(requests,config,serviceName){for(var packed=[],i=0;i<requests.length;i++)packed.push(requests[i].body);config.func(packed).then(function(responses){try{if(!isArray_(responses)||responses.length!==requests.length)throw new Error(Errors.ILLEGAL_RESPONSE_SIZE.toString())}catch(err){return void rejectAll(requests,err)}resolveAllSuccessful(requests,responses),setServiceStatus(serviceName,"online")},function(err){rejectAll(requests,err),setServiceStatus(serviceName,"offline")})});var Errors={ILLEGAL_ARGUMENT:new ErrorMessage(2e3,"Illegal argument(s). $1"),SERVICE_UNREGISTERED:new ErrorMessage(2001,"The service with the given name has not been registered: $1."),SERVICE_ALREADY_REGISTERED:new ErrorMessage(2002,"The service with the given name has already been registered: $1."),ILLEGAL_RESPONSE_SIZE:new ErrorMessage(2003,"Make sure the service returns an array equally sized to the number of (logical) requests."),ERRONEOUS_RESPONSE:new ErrorMessage(2004,"The service returned an erroneous response. $1")};return{ServiceType:ServiceType,register:register,unregister:unregister,isRegistered:isRegistered,send:send,flush:flush,flushAll:flushAll,registerType:registerType,resolveAll:resolveAll,rejectAll:rejectAll,resolveAllSuccessful:resolveAllSuccessful,setServiceStatus:setServiceStatus,getServiceStatus:getServiceStatus,Errors:Errors,ErrorMessage:ErrorMessage}});